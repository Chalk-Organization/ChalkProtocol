var searchIndex = JSON.parse('{\
"chalk_protocol":{"doc":"","t":"ANNDENNLLLLLLLLLLLLLLLLLLLLLLL","n":["tcp","FailedToWriteListeners","FailedToWriteStreams","TcpClient","TcpClientError","UnboundListener","UnboundStream","bind_to","borrow","borrow","borrow_mut","borrow_mut","connect_to","fmt","fmt","from","from","into","into","new","provide","read","to_string","try_from","try_from","try_into","try_into","type_id","type_id","write"],"q":[[0,"chalk_protocol"],[1,"chalk_protocol::tcp"]],"d":["An async wrapper for <code>TcpStream</code> and <code>TcpListener</code>","","","Async Tcp Client","Errors for TcpClient","","","Creates a <code>TcpListener</code>.","","","","","Creates a <code>TcpStream</code>.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>TcpClient</code>","","Reads from a Client to get any sent data.","","","","","","","","Sends data to a bound listener."],"i":[0,4,4,0,0,4,4,1,1,4,1,4,1,4,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1],"f":[0,0,0,0,0,0,0,[[1,2],[[3,[1]]]],[[]],[[]],[[]],[[]],[[1,2],[[3,[1]]]],[[4,5],6],[[4,5],6],[[]],[[]],[[]],[[]],[[],1],[7],[1,[[3,[1]]]],[[],8],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[1,[[3,[1]]]]],"c":[],"p":[[3,"TcpClient"],[8,"ToSocketAddrs"],[6,"Result"],[4,"TcpClientError"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
